/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hms.view;

import com.hms.model.DatabaseHandler;
import com.hms.model.PathiologicalTestHandler;
import com.hms.model.RadiologicalTestDataHandler;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.List;
import java.awt.Point;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JWindow;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.text.AbstractDocument;
import org.bson.Document;

/**
 *
 * @author USER
 */
public class PathologicalTestSearch extends javax.swing.JFrame {

    /**
     * Creates new form PathologicalTestSearch
     */
    private static final int TOAST_WIDTH = 200;
    private static final int TOAST_HEIGHT = 100;
    private static final int DISPLAY_DURATION = 2000; // 2 seconds

    String connectionString = "mongodb+srv://arponamitroy012:bEs2tbOmm32mrrmi@cluster0.g2xmh.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
    String databaseName = "LabTest";
    String collectionName = "RadiologicalTest";
    String collectionName1 = "PathiologicalTest";

    MongoClient mongoClient = MongoClients.create(connectionString);

    MongoDatabase database = mongoClient.getDatabase(databaseName);

    MongoCollection<Document> collections = database.getCollection(collectionName);

    MongoCollection<Document> collections1 = database.getCollection(collectionName1);

    DefaultListModel<String> listModel = new DefaultListModel<>();

    public PathologicalTestSearch() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        searchingTest = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TestList = new javax.swing.JList<>();
        searchByCost = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Search Test");

        searchingTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchingTestActionPerformed(evt);
            }
        });

        Search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Search.setText("Search");
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchMouseClicked(evt);
            }
        });
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Radiological");

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Pathiological");

        TestList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(TestList);

        searchByCost.setText("Cost");
        searchByCost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchByCostMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addGap(29, 29, 29)
                        .addComponent(jRadioButton2)
                        .addGap(18, 18, 18)
                        .addComponent(searchByCost))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchingTest, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search)))
                .addGap(45, 45, 45))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(searchByCost))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchingTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchingTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchingTestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchingTestActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
    }

    private void CancelButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_SearchActionPerformed

    private void SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseClicked
        // TODO add your handling code here:

        listModel.clear();

        listModel.addElement("Title    TestCost    IsAvailable     Reagent/Platilate");

        if (searchByCost.isSelected()) {

            if (jRadioButton1.isSelected()) {

                try {

                    try {

                        Double.parseDouble(searchingTest.getText().trim());

                    } catch (Exception e1) {

                        try {

                            throw new Exception("Please enter a number");

                        } catch (Exception ex1) {

                            JOptionPane.showMessageDialog(this, ex1.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

                        }

                    }

                    DatabaseHandler db = new RadiologicalTestDataHandler();

                    db.searchByTestCost(searchingTest.getText().trim(), listModel);

                    TestList.setModel(listModel);

                } catch (Exception e) {

                    JOptionPane.showMessageDialog(this, e.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

                }

            } else if (jRadioButton2.isSelected()) {

                try {

                    try {

                        Double.parseDouble(searchingTest.getText().trim());

                    } catch (Exception e1) {

                        try {

                            throw new Exception("Please enter a number");

                        } catch (Exception ex1) {

                            JOptionPane.showMessageDialog(this, ex1.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

                        }

                    }

                    DatabaseHandler db = new PathiologicalTestHandler();

                    db.searchByTestCost(searchingTest.getText().trim(), listModel);

                    TestList.setModel(listModel);

                } catch (Exception e) {

                    JOptionPane.showMessageDialog(this, e.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

                }

            } else {

                JOptionPane.showMessageDialog(this, "Please select either radiological nor pathiological", "Test Details", JOptionPane.INFORMATION_MESSAGE);

            }

            return;

        }

        if (jRadioButton1.isSelected()) {

            try {

                try {

                    Double.parseDouble(searchingTest.getText().trim());

                } catch (Exception e1) {

                    try {

                        throw new Exception("Please enter a number");

                    } catch (Exception ex1) {

                        JOptionPane.showMessageDialog(this, ex1.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

                    }

                }

                DatabaseHandler db = new RadiologicalTestDataHandler();

                db.searchByTitle(searchingTest.getText().trim(), listModel);

                TestList.setModel(listModel);

            } catch (Exception e) {

                JOptionPane.showMessageDialog(this, e.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

            }

        } else if (jRadioButton2.isSelected()) {

            try {

                try {

                    Double.parseDouble(searchingTest.getText().trim());

                } catch (Exception e1) {

                    try {

                        throw new Exception("Please enter a number");

                    } catch (Exception ex1) {

                        JOptionPane.showMessageDialog(this, ex1.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

                    }

                }

                DatabaseHandler db = new PathiologicalTestHandler();

                db.searchByTitle(searchingTest.getText().trim(), listModel);

                TestList.setModel(listModel);

            } catch (Exception e) {

                JOptionPane.showMessageDialog(this, e.getMessage(), "Test Details", JOptionPane.INFORMATION_MESSAGE);

            }

        } else {

            JOptionPane.showMessageDialog(this, "Please select either radiological nor pathiological", "Test Details", JOptionPane.INFORMATION_MESSAGE);

        }

    }//GEN-LAST:event_SearchMouseClicked

    boolean clicked = false;

    private void searchByCostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchByCostMouseClicked

        if (!clicked) {

            /*searchingTest.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                    char c = e.getKeyChar();
                    // Allow only digits
                    if (!Character.isDigit(c)) {
                        e.consume(); // Ignore the event
                    }
                }
            });*/
            clicked = true;

        } else {

        }

    }//GEN-LAST:event_searchByCostMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PathologicalTestSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PathologicalTestSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PathologicalTestSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PathologicalTestSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PathologicalTestSearch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Search;
    private javax.swing.JList<String> TestList;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox searchByCost;
    private javax.swing.JTextField searchingTest;
    // End of variables declaration//GEN-END:variables
}
